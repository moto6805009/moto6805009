from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.core.text import LabelBase
from kivy.utils import platform
import os
import requests

# ===== ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ü‡∏≠‡∏ô‡∏ï‡πå =====
FONT_NAME = "THSarabunNew"
FONT_PATH = "THSarabunNew.ttf"
if os.path.exists(FONT_PATH):
    LabelBase.register(name=FONT_NAME, fn_regular=FONT_PATH)
else:
    FONT_NAME = None  # fallback ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ü‡∏≠‡∏ô‡∏ï‡πå

# ===== Discord Webhook =====
DISCORD_WEBHOOK_URL = "https://discordapp.com/api/webhooks/1372026730109468672/1Zsl1q-dST8NTXEKs2CuUK-fEgEKTb_wB6wbRbRqG5tfYLsUKiEpAv6WzRuFaMlEKO5Q"

class RepairForm(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(orientation='vertical', padding=10, spacing=10, **kwargs)

        self.name = TextInput(hint_text="üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á", font_name=FONT_NAME)
        self.branch = TextInput(hint_text="üè¢ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó / ‡∏™‡∏≤‡∏Ç‡∏≤", font_name=FONT_NAME)
        self.device = TextInput(hint_text="üíª ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢", font_name=FONT_NAME)
        self.detail = TextInput(hint_text="üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤", multiline=True, font_name=FONT_NAME)
        self.contact = TextInput(hint_text="üìû ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö", font_name=FONT_NAME)

        self.add_widget(self.name)
        self.add_widget(self.branch)
        self.add_widget(self.device)
        self.add_widget(self.detail)
        self.add_widget(self.contact)

        submit = Button(text="‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°", background_color=(0, 0.6, 0, 1), font_name=FONT_NAME)
        submit.bind(on_press=self.send_report)
        self.add_widget(submit)

        self.status_label = Label(text="", font_name=FONT_NAME)
        self.add_widget(self.status_label)

    def send_report(self, instance):
        content = f"""üîß **‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå**

üë§ ‡∏ú‡∏π‡πâ‡πÅ‡∏à‡πâ‡∏á: {self.name.text}
üè¢ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó / ‡∏™‡∏≤‡∏Ç‡∏≤: {self.branch.text}
üíª ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢: {self.device.text}
üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {self.detail.text}
üìû ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö: {self.contact.text}
"""

        try:
            response = requests.post(DISCORD_WEBHOOK_URL, json={"content": content})
            if response.status_code in (200, 204):
                self.status_label.text = "‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
                self.name.text = ""
                self.branch.text = ""
                self.device.text = ""
                self.detail.text = ""
                self.contact.text = ""
            else:
                self.status_label.text = f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {response.status_code}"
        except Exception as e:
            self.status_label.text = f"‚ùå ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"

class RepairApp(App):
    def build(self):
        return RepairForm()

if __name__ == '__main__':
    RepairApp().run()
